#+STARTUP: content
#+PROPERTY: header-args+ :mkdirp yes

* Shell and terminal

  Shell and terminal related settings and scripts.

** Alacritty

   Configuration.

   #+BEGIN_SRC yaml :tangle ~/.config/alacritty/alacritty.yml :noweb yes
     # Configuration for Alacritty, the GPU enhanced terminal emulator

     # Any items in the `env` entry below will be added as
     # environment variables. Some entries may override variables
     # set by alacritty it self.
     env:
       # TERM env customization.
       #
       # If this property is not set, alacritty will set it to xterm-256color.
       #
       # Note that some xterm terminfo databases don't declare support for italics.
       # You can verify this by checking for the presence of `smso` and `sitm` in
       # `infocmp xterm-256color`.
       TERM: xterm-256color

     window:
       # Window dimensions in character columns and lines
       # Falls back to size specified by window manager if set to 0x0.
       # (changes require restart)
       dimensions:
         columns: 80
         lines: 24

       # Adds this many blank pixels of padding around the window
       # Units are physical pixels; this is not DPI aware.
       # (change requires restart)
       padding:
         x: 2
         y: 2

       dynamic_padding: true

       # Window decorations
       # Setting this to false will result in window without borders and title bar.
       decorations: "none"

       opacity: 1.0

     scrolling:
       # How many lines of scrollback to keep,
       # '0' will disable scrolling.
       history: 30000

       # Number of lines the viewport will move for every line
       # scrolled when scrollback is enabled (history > 0).
       multiplier: 3

     # When true, bold text is drawn using the bright variant of colors.
     draw_bold_text_with_bright_colors: true

     # Font configuration (changes require restart)
     #
     # Important font attributes like antialiasing, subpixel aa, and hinting can be
     # controlled through fontconfig. Specifically, the following attributes should
     # have an effect:
     #
     # * hintstyle
     # * antialias
     # * lcdfilter
     # * rgba
     #
     # For instance, if you wish to disable subpixel antialiasing, you might set the
     # rgba property to "none". If you wish to completely disable antialiasing, you
     # can set antialias to false.
     #
     # Please see these resources for more information on how to use fontconfig
     #
     # * https://wiki.archlinux.org/index.php/font_configuration#Fontconfig_configuration
     # * file:///usr/share/doc/fontconfig/fontconfig-user.html
     font:
       # The normal (roman) font face to use.
       normal:
         family: "<<font-monospace()>>" # should be "Menlo" or something on macOS.
         # Style can be specified to pick a specific face.
         style: Normal

       # The bold font face
       bold:
         family: "<<font-monospace()>>" # should be "Menlo" or something on macOS.
         # Style can be specified to pick a specific face.
         style: Bold

       # The italic font face
       italic:
         family: "<<font-monospace()>>" # should be "Menlo" or something on macOS.
         # Style can be specified to pick a specific face.
         style: Italic

       # Point size of the font
       size: 12.0

       # Offset is the extra space around each character. offset.y can be thought of
       # as modifying the linespacing, and offset.x as modifying the letter spacing.
       offset:
         x: 0
         y: 0

       # Glyph offset determines the locations of the glyphs within their cells with
       # the default being at the bottom. Increase the x offset to move the glyph to
       # the right, increase the y offset to move the glyph upward.
       glyph_offset:
         x: 0
         y: 0

       # OS X only: use thin stroke font rendering. Thin strokes are suitable
       # for retina displays, but for non-retina you probably want this set to
       # false.
       use_thin_strokes: true

     # Should display the render timer
     #render_timer: false

     # Colors
     colors:
       # Default colors
       primary:
         background: '0xffffff'
         foreground: '0x26272d'

       # Normal colors
       normal:
         black:   '0x23242a'
         red:     '0xa80000'
         green:   '0x005200'
         yellow:  '0x8b3800'
         blue:    '0x0030a6'
         magenta: '0x721045'
         cyan:    '0x005589'
         white:   '0xe8e8e8'

       # Bright colors
       bright:
         black:   '0x828282'
         red:     '0xa80000'
         green:   '0x005200'
         yellow:  '0x8b3800'
         blue:    '0x0030a6'
         magenta: '0x721045'
         cyan:    '0x005589'
         white:   '0xf8f8f8'

     # Visual Bell
     #
     # Any time the BEL code is received, Alacritty "rings" the visual bell. Once
     # rung, the terminal background will be set to white and transition back to the
     # default background color. You can control the rate of this transition by
     # setting the `duration` property (represented in milliseconds). You can also
     # configure the transition function by setting the `animation` property.
     #
     # Possible values for `animation`
     # `Ease`
     # `EaseOut`
     # `EaseOutSine`
     # `EaseOutQuad`
     # `EaseOutCubic`
     # `EaseOutQuart`
     # `EaseOutQuint`
     # `EaseOutExpo`
     # `EaseOutCirc`
     # `Linear`
     #
     # To completely disable the visual bell, set its duration to 0.
     #
     bell:
       animation: EaseOutExpo
       duration: 0

     # Mouse bindings
     #
     # Currently doesn't support modifiers. Both the `mouse` and `action` fields must
     # be specified.
     #
     # Values for `mouse`:
     # - Middle
     # - Left
     # - Right
     # - Numeric identifier such as `5`
     #
     # Values for `action`:
     # - Paste
     # - PasteSelection
     # - Copy (TODO)
     mouse_bindings:
       - { mouse: Middle, action: PasteSelection }

     mouse:
       # Click settings
       #
       # The `double_click` and `triple_click` settings control the time
       # alacritty should wait for accepting multiple clicks as one double
       # or triple click.
       double_click: { threshold: 300 }
       triple_click: { threshold: 300 }

     selection:
       semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

     window.dynamic_title: true

     mouse.hide_when_typing: false

     # Style of the cursor
     #
     # Values for 'cursor_style':
     # - Block
     # - Underline
     # - Beam
     cursor.style: Block

     # Whether the cursor should be a hollow block on window focus loss
     cursor.unfocused_hollow: true

     # Live config reload (changes require restart)
     live_config_reload: true

     # Shell
     #
     # You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
     # Entries in shell.args are passed unmodified as arguments to the shell.
     #
     # shell:
     #   program: /bin/bash
     #   args:
     #     - --login

     # Key bindings
     #
     # Each binding is defined as an object with some properties. Most of the
     # properties are optional. All of the alphabetical keys should have a letter for
     # the `key` value such as `V`. Function keys are probably what you would expect
     # as well (F1, F2, ..). The number keys above the main keyboard are encoded as
     # `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
     # etc.  These all match the glutin::VirtualKeyCode variants.
     #
     # A list with all available `key` names can be found here:
     # https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
     #
     # Possible values for `mods`
     # `Command`, `Super` refer to the super/command/windows key
     # `Control` for the control key
     # `Shift` for the Shift key
     # `Alt` and `Option` refer to alt/option
     #
     # mods may be combined with a `|`. For example, requiring control and shift
     # looks like:
     #
     # mods: Control|Shift
     #
     # The parser is currently quite sensitive to whitespace and capitalization -
     # capitalization must match exactly, and piped items must not have whitespace
     # around them.
     #
     # Either an `action`, `chars`, or `command` field must be present.
     #   `action` must be one of the following:
     #       - `Paste`
     #       - `PasteSelection`
     #       - `Copy`
     #       - `IncreaseFontSize`
     #       - `DecreaseFontSize`
     #       - `ResetFontSize`
     #       - `ScrollPageUp`
     #       - `ScrollPageDown`
     #       - `ScrollToTop`
     #       - `ScrollToBottom`
     #       - `Quit`
     #   `chars` writes the specified string every time that binding is activated.
     #     These should generally be escape sequences, but they can be configured to
     #     send arbitrary strings of bytes.
     #   `command` must be a map containing a `program` string, and `args` array of
     #     strings. For example:
     #     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
     #
     # Want to add a binding (e.g. "PageUp") but are unsure what the X sequence
     # (e.g. "\x1b[5~") is? Open another terminal (like xterm) without tmux,
     # then run `showkey -a` to get the sequence associated to a key combination.
     key_bindings:
       - { key: V,        mods: Control|Shift,    action: Paste               }
       - { key: C,        mods: Control|Shift,    action: Copy                }
       - { key: Paste,                   action: Paste                        }
       - { key: Copy,                    action: Copy                         }
       - { key: Q,        mods: Command, action: Quit                         }
       - { key: W,        mods: Command, action: Quit                         }
       - { key: Insert,   mods: Shift,   action: PasteSelection               }
       - { key: Key0,     mods: Control, action: ResetFontSize                }
       - { key: Equals,   mods: Control, action: IncreaseFontSize             }
       - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
       - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
       - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
       - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
       - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
       - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
       - { key: PageUp,                  chars: "\x1b[5~"                     }
       - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
       - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
       - { key: PageDown,                chars: "\x1b[6~"                     }
       - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
       - { key: Back,                    chars: "\x7f"                        }
       - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
       - { key: Insert,                  chars: "\x1b[2~"                     }
       - { key: Delete,                  chars: "\x1b[3~"                     }
       - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
       - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
       - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
       - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
       - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
       - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
       - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
       - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
       - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
       - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
       - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
       - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
       - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
       - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
       - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
       - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
       - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
       - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
       - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
       - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
       - { key: F1,                      chars: "\x1bOP"                      }
       - { key: F2,                      chars: "\x1bOQ"                      }
       - { key: F3,                      chars: "\x1bOR"                      }
       - { key: F4,                      chars: "\x1bOS"                      }
       - { key: F5,                      chars: "\x1b[15~"                    }
       - { key: F6,                      chars: "\x1b[17~"                    }
       - { key: F7,                      chars: "\x1b[18~"                    }
       - { key: F8,                      chars: "\x1b[19~"                    }
       - { key: F9,                      chars: "\x1b[20~"                    }
       - { key: F10,                     chars: "\x1b[21~"                    }
       - { key: F11,                     chars: "\x1b[23~"                    }
       - { key: F12,                     chars: "\x1b[24~"                    }
       - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
       - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
       - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
       - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
       - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
       - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
       - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
       - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
       - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
       - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
       - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
       - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
       - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
       - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
       - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
       - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
       - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
       - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
       - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
       - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
       - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
       - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
       - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
       - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
       - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
       - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
       - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
       - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
       - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
       - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
       - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
       - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
       - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
       - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
       - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
       - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
       - { key: F1,       mods: Super,   chars: "\x1b[1;3P"                   }
       - { key: F2,       mods: Super,   chars: "\x1b[1;3Q"                   }
       - { key: F3,       mods: Super,   chars: "\x1b[1;3R"                   }
       - { key: F4,       mods: Super,   chars: "\x1b[1;3S"                   }
       - { key: F5,       mods: Super,   chars: "\x1b[15;3~"                  }
       - { key: F6,       mods: Super,   chars: "\x1b[17;3~"                  }
       - { key: F7,       mods: Super,   chars: "\x1b[18;3~"                  }
       - { key: F8,       mods: Super,   chars: "\x1b[19;3~"                  }
       - { key: F9,       mods: Super,   chars: "\x1b[20;3~"                  }
       - { key: F10,      mods: Super,   chars: "\x1b[21;3~"                  }
       - { key: F11,      mods: Super,   chars: "\x1b[23;3~"                  }
       - { key: F12,      mods: Super,   chars: "\x1b[24;3~"                  }
   #+END_SRC

   Wrapper around alacritty. Sets appropriate dpi as reported by X.

   Requires setting zsh shebang since it needs fp division.

   #+BEGIN_SRC bash :tangle ~/.bin/terminal :shebang "#!/usr/bin/env zsh"
     dpi=$(xrdb -query | grep "Xft.dpi" | awk '{print $2}')
     if [ -n "$dpi" ]; then
         export WINIT_HIDPI_FACTOR=$(( dpi / 96.0 ))
     fi

     # There's a gl bug preventing alacritty from launching.
     #
     # Error creating GL context; Received multiple errors. Errors:
     # `[NoAvailablePixelFormat, OsError("Couldn\'t setup vsync: expected interval
     # `1` but got `0`")]`
     #
     # Setting vblank_mode seems to fix this. See
     # https://github.com/alacritty/alacritty/issues/4491
     vblank_mode=1 alacritty
   #+END_SRC

** Misc Scripts
   :PROPERTIES:
   :header-args:bash: :shebang "#!/usr/bin/env bash" :tangle-mode (identity #o755)
   :END:

   Set of useful scripts.

*** bri

    Set screen brightness. Mostly used for my laptop. i2c used to work with my
    monitor(s), but I haven't tried it recently, so might be broken.

    #+BEGIN_SRC bash :tangle ~/.bin/bri
      mon_current() {
          local outstr
          outstr=$(ddcutil getvcp 10)
          local nums
          nums=$(echo -e "$outstr" | sed -e 's/[^0-9]/ /g' -e 's/^ *//g' -e 's/ *$//g' | tr -s ' ')
          echo "$nums" | cut -d " " -f 3
      }

      num_displays() {
          ddcutil detect | grep "Display" -c
      }

      case $1 in
          "monitor")
          case $2 in
              "up")
              amount="${3:-2}"
              curr=$(mon_current)
              for i in $(num_displays); do
                  ddcutil setvcp 10 $(( curr + amount )) --display "$i"
              done
              ;;
              "down")
              amount="${3:-2}"
              curr=$(mon_current)
              for i in $(num_displays); do
                  ddcutil setvcp 10 $(( curr - amount )) --display "$i"
              done
              ;;
              "set")
              : "${3?"Usage: $0 monitor set PERCENT"}"
              if [ -n "$4" ]; then
                  ddcutil setvcp 10 "$3" --display "$4"
              else
                  for i in $(num_displays); do
                      ddcutil setvcp 10 "$3" --display "$i"
                  done
              fi
              ;;
          esac
          ;;
          "laptop")
          case $2 in
              "up")
              amount="${3:-2}"
              xbacklight -inc "$amount" -fps 60
              ;;
              "down")
              amount="${3:-2}"
              xbacklight -dec "$amount" -fps 60
              ;;
              "set")
              : "${3?"Usage: $0 laptop set PERCENT"}"
              xbacklight -set "$3" -fps 60
              ;;
          esac
          ;;
      esac
    #+END_SRC

*** dpi

    Set dpi for my commonly used systems.

    #+BEGIN_SRC bash :tangle ~/.bin/dpi
      laptop_dpi=222
      monitor_dpi=148

      function set_dpi() {
         echo "Xft.dpi: $1" | xrdb -merge
         echo "*dpi: $1" | xrdb -merge
      }

      if [ "$#" -eq 1 ]; then
         case $1 in
             "laptop")
                 set_dpi $laptop_dpi
                 ;;
             "monitor")
                 set_dpi $monitor_dpi
                 ;;
             ,*)
                 set_dpi "$1"
                 ;;
         esac
      else
          print "Invalid number of arguments"
      fi
    #+END_SRC

*** editor

    Start the emacs daemon if it's not already started, and open a client to it.

    #+BEGIN_SRC bash :tangle ~/.bin/editor
      emacsclient -a '' "$@"
    #+END_SRC

*** essid

    Get currently connected ssid.

    #+BEGIN_SRC bash :tangle ~/.bin/essid
      ssid=$((iwgetid || echo "no wifi") | cut -d\" -f2)
      echo $ssid
    #+END_SRC

    #+RESULTS:
    : Lan Before Time

*** lock

    Lock or suspend.

    #+BEGIN_SRC bash :tangle ~/.bin/lock
      case $1 in
          "suspend")
              systemctl suspend
              ;;
          ,*)
              xset s activate
              ;;
      esac
    #+END_SRC

*** mm

    Configuration for setting caps lock to be left control.

    #+BEGIN_SRC conf :tangle ~/.xmodmap
      remove Lock = Caps_Lock
      keysym Caps_Lock = Control_L
      add Control = Control_L
    #+END_SRC

    Script for setting the above configuration, and setting left control to send
    escape on press. Left control will continue to send left control when held
    down.

    This needs to be ran after suspend (sometimes twice for whatever reason).

    #+BEGIN_SRC bash :tangle ~/.bin/mm
      xmodmap ~/.xmodmap
      xcape -e 'Control_L=Escape'
    #+END_SRC

*** network

    Start up network related stuff.

    #+BEGIN_SRC bash :tangle ~/.bin/network
      set -ex

      if [ -z "$1" ]; then
          echo "Missing network name"
          exit 1
      fi

      # For whatever reason, not setting this interface down will cause netctl to fail
      # on this machine.
      if [ "$HOSTNAME" == "system7" ]; then
          sudo ip link set wlo1 down
      fi

      # Connect to selected network.
      sudo netctl start "$1"
    #+END_SRC

*** notify

    Notify after a process has completed.

    #+BEGIN_SRC bash :tangle ~/.bin/notify
      if [ "$1" = "critical" ] ||
             [ "$1" = "normal" ] ||
             [ "$1" = "low" ]; then
          opt="-u $1"
          shift
      fi
      "$@"
      if [ -n "$DISPLAY" ]; then
          notify-send "Process Completed" "$*" $opt
      fi
      tput bel
    #+END_SRC

*** screenshot

    Take a screenshot and save it to =~/Pictures/screenshots=. The screenshot will
    be put into the clipboard.

    #+BEGIN_SRC bash :tangle ~/.bin/screenshot
      set -e

      file=screenshot_$(date -Iseconds).png

      maim --select --hidecursor | tee ~/Pictures/screenshots/$file | xclip -selection clipboard -t image/png
      notify-send "Screenshot taken" "$file"
    #+END_SRC

*** toggle-redshift

    Kill redshift if it's running, start it if it's not.

    #+BEGIN_SRC bash :tangle ~/.bin/toggle-redshift
      trap '' HUP

      if pgrep -x redshift > /dev/null; then
          pkill redshift
          echo "redshift killed"
      else
          nohup redshift &> /tmp/redshift.nohup.out &
          echo "redshift started"
      fi
    #+END_SRC

*** vol

    Helper for setting and getting volume. Uses =pamixer=.

    #+BEGIN_SRC bash :tangle ~/.bin/vol
      case $1 in
          "up")
              pamixer -u; pamixer -i 5
              ;;
          "down")
              pamixer -u; pamixer -d 5
              ;;
          "mute")
              pamixer -t
              ;;
          "get")
              pamixer --get-volume
              ;;
      esac
    #+END_SRC


*** postgres-scratch

    Spin up a postgres docker container.

    #+BEGIN_SRC bash :tangle ~/.bin/postgres-scratch
      name="postgres-scratch-${RANDOM}"
      docker run --rm --name "$name" -e POSTGRES_HOST_AUTH_METHOD=trust -d postgres:14
    #+END_SRC

** Bashrc
   :PROPERTIES:
   :header-args:bash: :tangle ~/.bashrc :comments org :padline no
   :END:

   If not running interactively, don't do anything

   #+BEGIN_SRC bash
     [[ $- != *i* ]] && return
   #+END_SRC

   Include scripts tangled from [[*Misc Scripts]]

   #+BEGIN_SRC bash
     export PATH=$PATH:$HOME/.bin/
   #+END_SRC

   Set editor to script tangled from [[*editor]].

   #+BEGIN_SRC bash
     export EDITOR=editor
   #+END_SRC

   Go related settings. Using a non-standard go path.

   #+BEGIN_SRC bash
     export GOPATH=$HOME/.go
     export PATH=$PATH:$HOME/.go/bin
   #+END_SRC

   Stack installs binaries here. Needed since I'm using stack to manage xmonad.

   #+BEGIN_SRC bash
     export PATH=$PATH:$HOME/.local/bin
   #+END_SRC

   Get the number of threads by counting occurrences of "processor" in cpu info.

   #+name: num-threads
   #+BEGIN_SRC bash :tangle no
     grep -c ^processor /proc/cpuinfo
   #+END_SRC

   #+RESULTS:
   : 16

   Set number of threads for julia to the number of threads counted by the
   machine tangling this file.

   #+BEGIN_SRC bash :noweb yes
     export JULIA_NUM_THREADS=<<num-threads()>>
   #+END_SRC

   Include cargo binaries in path.

   #+BEGIN_SRC bash
     export PATH=$PATH:$HOME/.cargo/bin
   #+END_SRC

   Include [[https://github.com/leanprover/elan][elan]] binaries in path.

   #+BEGIN_SRC bash
     export PATH=$PATH:$HOME/.elan/bin
   #+END_SRC

   I like colors in my =ls= output.

   #+BEGIN_SRC bash
     alias ls='ls --color=auto'
   #+END_SRC

   Set prompt.

   #+BEGIN_SRC bash
     PS1='[\u@\h \W]\$ '
   #+END_SRC

* Fonts

  List of fonts to be used elsewhere.

  #+name: font-serif
  #+BEGIN_SRC sh
    echo "Source Serif Pro"
  #+END_SRC

  #+RESULTS: font-serif
  : Source Serif Pro

  #+name: font-sans-serif
  #+BEGIN_SRC sh
    echo "Source Sans Pro"
  #+END_SRC

  #+RESULTS: font-sans-serif
  : Source Sans Pro

  #+name: font-monospace
  #+BEGIN_SRC sh
    echo "PragmataPro Mono"
  #+END_SRC

  #+RESULTS: font-monospace
  : PragmataPro Mono

** Iosevka build

   #+BEGIN_SRC sh
     git clone "https://github.com/be5invis/Iosevka" ~/Code/github.com/be5invis/Iosevka --depth 1
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC sh
     cd ~/Code/github.com/be5invis/Iosevka && git rev-parse HEAD
   #+END_SRC

   #+RESULTS:
   : fa8166b05776288eb57613dbce54ef256c4c5034

   #+name: iosevka-build-plan
   #+BEGIN_SRC toml
     [buildPlans.iosevka-custom]
     family = "Iosevka Custom"
     spacing = "fixed"
     serifs = "sans"
     no-cv-ss = false

     [buildPlans.iosevka-custom.variants.design]
     asterisk = "penta-low"
     number-sign = "slanted-open"
     dollar = "open"
     cent = "open"
     percent = "rings-continuous-slash"
     zero = "slashed-split"
     ampersand = "upper-open"
     g = "double-storey"

     [buildPlans.iosevka-custom.metric-override]
     leading = 1200
   #+END_SRC

   Build the ttf files with the build plan. Requires =ttfautohint= to be
   installed (can be installed from the AUR).

   #+BEGIN_SRC sh :noweb yes
     cd ~/Code/github.com/be5invis/Iosevka &&
         echo '
     <<iosevka-build-plan>>
     ' > private-build-plans.toml
   #+END_SRC

   #+RESULTS:

   #+BEGIN_SRC emacs-lisp :noweb yes
     (let ((default-directory "~/Code/github.com/be5invis/Iosevka")
           (cmd (string-join '("npm install"
                               "npm run build -- ttf::iosevka-custom"
                               "cp -r dist/iosevka-custom ~/syncthing/config/fonts/.")
                             "&&")))
       (async-shell-command cmd "*Iosevka build*"))
   #+END_SRC

   #+RESULTS:
   : #<window 15 on *Iosevka build*>

** Font config

   #+BEGIN_SRC nxml :tangle ~/.config/fontconfig/fonts.conf :noweb yes
     <?xml version="1.0"?>
     <!DOCTYPE fontconfig SYSTEM "fonts.dtd">
     <fontconfig>
         <match target="pattern">
             <test qual="any" name="family"><string>serif</string></test>
             <edit name="family" mode="assign" binding="same"><string><<font-serif()>></string></edit>
         </match>
         <match target="pattern">
             <test qual="any" name="family"><string>sans-serif</string></test>
             <edit name="family" mode="assign" binding="same"><string><<font-sans-serif()>></string></edit>
         </match>
         <match target="pattern">
             <test qual="any" name="family"><string>monospace</string></test>
             <edit name="family" mode="assign" binding="same"><string><<font-monospace()>></string></edit>
         </match>

         <match target="font">
             <edit name="hintstyle" mode="assign"><const>hintnone</const></edit>
         </match>
     </fontconfig>
   #+END_SRC

* Git

  Global git configurations.

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
        email = scsmithr@gmail.com
        name = Sean Smith
        signingkey = BA3E3A399960AD0D
    [commit]
        gpgsign = true
    [core]
        editor = editor
        excludesfile = /home/sean/.gitignore
    [http]
        cookiefile = /home/sean/.gitcookies
    [github]
        user = scsmithr
    [init]
        defaultBranch = main
  #+END_SRC

  Ignore some things globally.

  #+BEGIN_SRC conf :tangle ~/.gitignore
    worktree/
    vendor/
    node_modules/
    .log/
    .ccls-cache/
  #+END_SRC

  Add new new diff mode for org mode files. This allows for customizing the hunk
  header for org mode related diffs.

  #+BEGIN_SRC conf :tangle ~/.config/git/attributes
    ,*.org diff=org
  #+END_SRC

  Add regex to use org headers for diff headers. This will get the previous
  header, which won't be the parent header in some cases, but that's still good
  enough to provide context.

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [diff "org"]
        xfuncname = "^(\\*+ +.*)$"
  #+END_SRC

  Add diff and regex for markdown files as well.

  #+BEGIN_SRC conf :tangle ~/.config/git/attributes
    ,*.md diff=md
  #+END_SRC

  Regex only supports headers with =#= characters. I never use the alternative
  way of denoting headers, so this is good enough for my use case.

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [diff "md"]
        xfuncname = "^(#+ +.*)$"
  #+END_SRC

* X

  Common fonts used throughout.

  #+name: ui-font-size
  #+BEGIN_SRC shell
    echo 11
  #+END_SRC

  #+RESULTS: ui-font-size
  : 10

  #+name: ui-font-weight
  #+BEGIN_SRC shell
    echo semibold
  #+END_SRC

  #+RESULTS: ui-font-weight
  : regular

  #+name: xft-ui-font
  #+BEGIN_SRC shell :noweb yes
    echo "xft:<<font-sans-serif()>>:<<ui-font-weight()>>:size=<<ui-font-size()>>"
  #+END_SRC

  #+RESULTS: xft-ui-font
  : xft:Source Sans Pro:semibold:size=10

  Common colors used throughout.

  #+name: ui-dark-color
  #+BEGIN_SRC shell
    echo "#36373d"
  #+END_SRC

  #+RESULTS: ui-dark-color
  : #46474d

  #+name: ui-fg-color
  #+BEGIN_SRC shell
    echo "#ababb4"
  #+END_SRC

  #+RESULTS: ui-fg-color
  : #ababb4

  #+name: ui-fg-muted-color
  #+BEGIN_SRC shell
    echo "#828282"
  #+END_SRC

  #+RESULTS: ui-fg-muted-color
  : #828282

  #+name: ui-fg-highlight-color
  #+BEGIN_SRC shell
    echo "#fcfcfc"
  #+END_SRC

  #+RESULTS: ui-fg-highlight-color
  : #fcfcfc

  #+name: ui-border-color
  #+BEGIN_SRC shell
    echo "#26272d"
  #+END_SRC

  #+RESULTS: ui-border-color
  : #26272d

** Redshift

   Retrieve location for machine currently tangling.

   #+name: location
   #+BEGIN_SRC bash :results none
     file="/tmp/.location"
     if [ ! -f "$file" ]; then
         curl https://location.services.mozilla.com/v1/geolocate?key=geoclue > "$file"
     fi
     cat "$file"
   #+END_SRC

   #+name: location-lat
   #+BEGIN_SRC bash :noweb yes
     <<location>> | jq .location.lat
   #+END_SRC

   #+name: location-long
   #+BEGIN_SRC bash :noweb yes
     <<location>> | jq .location.lng
   #+END_SRC

   #+BEGIN_SRC conf :tangle ~/.config/redshift/redshift.conf :noweb yes
     [redshift]
     ; Set the day and night screen temperatures
     temp-day=6500
     temp-night=3500

     ; Enable/Disable a smooth transition between day and night
     ; 0 will cause a direct change from day to night screen temperature.
     ; 1 will gradually increase or decrease the screen temperature
     transition=1

     ; Set the location-provider: 'geoclue', 'gnome-clock', 'manual'
     ; type 'redshift -l list' to see possible values
     ; The location provider settings are in a different section.
     location-provider=manual

     ; Configuration of the location-provider:
     ; type 'redshift -l PROVIDER:help' to see the settings
     ; e.g. 'redshift -l manual:help'
     [manual]
     lat=<<location-lat()>>
     lon=<<location-long()>>
   #+END_SRC

** Xinit
   :PROPERTIES:
   :header-args:sh: :tangle ~/.xinitrc :noweb yes :comments org :padline no
   :END:

   Set proper cursor, otherwise X defaults to an x shaped cursor which looks
   ugly. This seems to be using the cursor theme provided by Gnome, but I don't
   really care what it looks like.

   #+BEGIN_SRC sh
     xsetroot -cursor_name left_ptr
   #+END_SRC

   Set some colors, load colors/themes from xresources.

   #+BEGIN_SRC sh
     hsetroot -solid "#CFCFCF"
     xrdb ~/.Xresources
   #+END_SRC

   Set initial dpi for my most used computers.

   #+BEGIN_SRC sh
     case $HOSTNAME in
         "system22")
             dpi laptop
             ;;
         "system7")
             dpi monitor
             ;;
     esac
   #+END_SRC

   Call script defined in [[mm]] to change caplock related settings.

   #+BEGIN_SRC sh
     mm
   #+END_SRC

   Set up gpg and ssh agents. Not too sure what the dbus update thing is for, I
   don't remember why I put it in.

   #+BEGIN_SRC sh
     dbus-update-activation-environment --systemd DISPLAY
     eval $(ssh-agent -s)
     export SSH_AUTH_SOCK
   #+END_SRC

   Start some background stuff.

   #+BEGIN_SRC sh
     redshift&
     dunst&
   #+END_SRC

   Set up lock screen, using =xsecurelock=.

   #+BEGIN_SRC sh
     xset s 300 5 # Lock after 5 minutes
     export XSECURELOCK_PASSWORD_PROMPT=time
     export XSECURELOCK_FONT="<<font-sans-serif()>>"
     xss-lock -l -- xsecurelock&
   #+END_SRC

   Enable smoother scrolling in firefox.

   #+BEGIN_SRC sh
     export MOZ_USE_XINPUT2=1
   #+END_SRC

   Launch =xmonad=.

   #+BEGIN_SRC sh
     exec xmonad
   #+END_SRC

** Xresources

   #+BEGIN_SRC conf :tangle ~/.Xresources
     Xcursor.size: 32

     #define S_base03        #002b36
     #define S_base02        #073642
     #define S_base01        #586e75
     #define S_base00        #26272d
     #define S_base0         #839496
     #define S_base1         #93a1a1
     #define S_base2         #eee8d5
     #define S_base3         #ffffff

     ,*background:            S_base3
     ,*foreground:            S_base00
     ,*fadeColor:             S_base3
     ,*cursorColor:           S_base01
     ,*pointerColorBackground:S_base1
     ,*pointerColorForeground:S_base01

     #define S_yellow        #b58900
     #define S_orange        #cb4b16
     #define S_red           #dc322f
     #define S_magenta       #d33682
     #define S_violet        #6c71c4
     #define S_blue          #268bd2
     #define S_cyan          #2aa198
     #define S_green         #859900

     !! black dark/light
     ,*color0:                S_base02
     ,*color8:                S_base03

     !! red dark/light
     ,*color1:                S_red
     ,*color9:                S_red

     !! green dark/light
     ,*color2:                S_green
     ,*color10:               S_green

     !! yellow dark/light
     ,*color3:                S_yellow
     ,*color11:               S_yellow

     !! blue dark/light
     ,*color4:                S_blue
     ,*color12:               S_blue

     !! magenta dark/light
     ,*color5:                S_magenta
     ,*color13:               S_magenta

     !! cyan dark/light
     ,*color6:                S_cyan
     ,*color14:               S_cyan

     !! white dark/light
     ,*color7:                S_base2
     ,*color15: S_base3

     Xft.Hinting: 0
     Xft.Antialias: 1
     Xft.HintStyle: "hintnone"
   #+END_SRC

** Notifications

   Notifications are provided by dunst.

   #+BEGIN_SRC conf :tangle ~/.config/dunst/dunstrc :noweb yes
     [global]
     ### Display ###

     # Which monitor should the notifications be displayed on.
     monitor = 0

     # Display notification on focused monitor.  Possible modes are:
     #   mouse: follow mouse pointer
     #   keyboard: follow window with keyboard focus
     #   none: don't follow anything
     #
     # "keyboard" needs a window manager that exports the
     # _NET_ACTIVE_WINDOW property.
     # This should be the case for almost all modern window managers.
     #
     # If this option is set to mouse or keyboard, the monitor option
     # will be ignored.
     follow = none

     width = 360
     origin = top-center
     offset = 0x34
     notification_limit = 1

     # Show how many messages are currently hidden (because of geometry).
     indicate_hidden = yes

     # Shrink window if it's smaller than the width.  Will be ignored if
     # width is 0.
     shrink = no

     # The transparency of the window.  Range: [0; 100].
     # This option will only work if a compositing window manager is
     # present (e.g. xcompmgr, compiz, etc.).
     transparency = 0

     # Draw a line of "separator_height" pixel height between two
     # notifications.
     # Set to 0 to disable.
     separator_height = 1

     # Padding between text and separator.
     padding = 4

     # Horizontal padding.
     horizontal_padding = 8

     # Defines width in pixels of frame around the notification window.
     # Set to 0 to disable.
     frame_width = 1

     # Defines color of the frame around the notification window.
     frame_color = "<<ui-border-color()>>"

     # Define a color for the separator.
     # possible values are:
     #  * auto: dunst tries to find a color fitting to the background;
     #  * foreground: use the same color as the foreground;
     #  * frame: use the same color as the frame;
     #  * anything else will be interpreted as a X color.
     separator_color = frame

     # Sort messages by urgency.
     sort = yes

     # Don't remove messages, if the user is idle (no mouse or keyboard input)
     # for longer than idle_threshold seconds.
     # Set to 0 to disable.
     # Transient notifications ignore this setting.
     idle_threshold = 120

     ### Text ###

     font = <<font-sans-serif()>> <<ui-font-weight()>> <<ui-font-size()>>

     # The spacing between lines.  If the height is smaller than the
     # font height, it will get raised to the font height.
     line_height = 0

     # Possible values are:
     # full: Allow a small subset of html markup in notifications:
     #        <b>bold</b>
     #        <i>italic</i>
     #        <s>strikethrough</s>
     #        <u>underline</u>
     #
     #        For a complete reference see
     #        <http://developer.gnome.org/pango/stable/PangoMarkupFormat.html>.
     #
     # strip: This setting is provided for compatibility with some broken
     #        clients that send markup even though it's not enabled on the
     #        server. Dunst will try to strip the markup but the parsing is
     #        simplistic so using this option outside of matching rules for
     #        specific applications *IS GREATLY DISCOURAGED*.
     #
     # no:    Disable markup parsing, incoming notifications will be treated as
     #        plain text. Dunst will not advertise that it has the body-markup
     #        capability if this is set as a global setting.
     #
     # It's important to note that markup inside the format option will be parsed
     # regardless of what this is set to.
     markup = full

     # The format of the message.  Possible variables are:
     #   %a  appname
     #   %s  summary
     #   %b  body
     #   %i  iconname (including its path)
     #   %I  iconname (without its path)
     #   %p  progress value if set ([  0%] to [100%]) or nothing
     #   %n  progress value if set without any extra characters
     #   %%  Literal %
     # Markup is allowed
     format = "%s - %b"

     # Alignment of message text.
     # Possible values are "left", "center" and "right".
     alignment = left

     # Show age of message if message is older than show_age_threshold
     # seconds.
     # Set to -1 to disable.
     show_age_threshold = -1

     # Split notifications into multiple lines if they don't fit into
     # geometry.
     word_wrap = no

     # When word_wrap is set to no, specify where to ellipsize long lines.
     # Possible values are "start", "middle" and "end".
     ellipsize = end

     # Ignore newlines '\n' in notifications.
     ignore_newline = yes

     # Merge multiple notifications with the same content
     stack_duplicates = true

     # Hide the count of merged notifications with the same content
     hide_duplicate_count = false

     # Display indicators for URLs (U) and actions (A).
     show_indicators = no

     ### Icons ###

     # Align icons left/right/off
     icon_position = off

     # Scale larger icons down to this size, set to 0 to disable
     max_icon_size = 32

     # Paths to default icons.
     icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

     ### History ###

     # Should a notification popped up from history be sticky or timeout
     # as if it would normally do.
     sticky_history = yes

     # Maximum amount of notifications kept in history
     history_length = 20

     ### Misc/Advanced ###

     # dmenu path.
     dmenu = /usr/bin/rofi -show -dmenu -p dunst

     # Browser for opening urls in context menu.
     browser = /usr/bin/firefox -new-tab

     # Always run rule-defined scripts, even if the notification is suppressed
     always_run_script = true

     # Define the title of the windows spawned by dunst
     title = Dunst

     # Define the class of the windows spawned by dunst
     class = Dunst

     ### Legacy

     # Use the Xinerama extension instead of RandR for multi-monitor support.
     # This setting is provided for compatibility with older nVidia drivers that
     # do not support RandR and using it on systems that support RandR is highly
     # discouraged.
     #
     # By enabling this setting dunst will not be able to detect when a monitor
     # is connected or disconnected which might break follow mode if the screen
     # layout changes.
     force_xinerama = false

     # Experimental features that may or may not work correctly. Do not expect them
     # to have a consistent behaviour across releases.
     [experimental]
     # Calculate the dpi to use on a per-monitor basis.
     # If this setting is enabled the Xft.dpi value will be ignored and instead
     # dunst will attempt to calculate an appropriate dpi value for each monitor
     # using the resolution and physical size. This might be useful in setups
     # where there are multiple screens with very different dpi values.
     per_monitor_dpi = false

     [urgency_low]
     # IMPORTANT: colors have to be defined in quotation marks.
     # Otherwise the "#" and following would be interpreted as a comment.
     background = "<<ui-dark-color()>>"
     foreground = "<<ui-fg-color()>>"
     timeout = 10
     # Icon for notifications with low urgency, uncomment to enable
     #icon = /path/to/icon

     [urgency_normal]
     background = "<<ui-dark-color()>>"
     foreground = "<<ui-fg-color()>>"
     timeout = 10
     # Icon for notifications with normal urgency, uncomment to enable
     #icon = /path/to/icon

     [urgency_critical]
     background = "<<ui-dark-color()>>"
     foreground = "<<ui-fg-color()>>"
     timeout = 0
     # Icon for notifications with critical urgency, uncomment to enable
     #icon = /path/to/icon

     # Every section that isn't one of the above is interpreted as a rules to
     # override settings for certain messages.
     # Messages can be matched by "appname", "summary", "body", "icon", "category",
     # "msg_urgency" and you can override the "timeout", "urgency", "foreground",
     # "background", "new_icon" and "format".
     # Shell-like globbing will get expanded.
     #
     # SCRIPTING
     # You can specify a script that gets run when the rule matches by
     # setting the "script" option.
     # The script will be called as follows:
     #   script appname summary body icon urgency
     # where urgency can be "LOW", "NORMAL" or "CRITICAL".
     #
     # NOTE: if you don't want a notification to be displayed, set the format
     # to "".
     # NOTE: It might be helpful to run dunst -print in a terminal in order
     # to find fitting options for rules.

     #[espeak]
     #    summary = "*"
     #    script = dunst_espeak.sh

     #[script-test]
     #    summary = "*script*"
     #    script = dunst_test.sh

     #[ignore]
     #    # This notification will not be displayed
     #    summary = "foobar"
     #    format = ""

     #[history-ignore]
     #    # This notification will not be saved in history
     #    summary = "foobar"
     #    history_ignore = yes

     #[signed_on]
     #    appname = Pidgin
     #    summary = "*signed on*"
     #    urgency = low
     #
     #[signed_off]
     #    appname = Pidgin
     #    summary = *signed off*
     #    urgency = low
     #
     #[says]
     #    appname = Pidgin
     #    summary = *says*
     #    urgency = critical
     #
     #[twitter]
     #    appname = Pidgin
     #    summary = *twitter.com*
     #    urgency = normal
     #
     # vim: ft=cfg
   #+END_SRC

** Window manager

   Combo of xmonad and xmobar.

*** Xmonad

    Xmonad is managed via =stack=.

    Clone required repos.

    #+BEGIN_SRC bash :results output
      mkdir -p ~/.xmonad
      if [ ! -d ~/.xmonad/xmonad-git/ ]; then
         git clone "https://github.com/xmonad/xmonad" ~/.xmonad/xmonad-git 2>&1
      fi

      if [ ! -d ~/.xmonad/xmonad-contrib-git/ ]; then
         git clone "https://github.com/xmonad/xmonad-contrib" ~/.xmonad/xmonad-contrib-git 2>&1
      fi
    #+END_SRC

    #+RESULTS:
    : Cloning into '/home/sean/.xmonad/xmonad-git'...
    : Cloning into '/home/sean/.xmonad/xmonad-contrib-git'...

    Get commit info.

    #+BEGIN_SRC shell
      (cd ~/.xmonad/xmonad-git/ && git rev-parse HEAD)
      (cd ~/.xmonad/xmonad-contrib-git/ && git rev-parse HEAD)
    #+END_SRC

    #+RESULTS:
    | 33a86c0cdb9aa481e23cc5527a997adef5e32d42 |
    | f821a2ec0c567fc7ebff438410fd566d67480593 |

    Stack configuration.

    #+BEGIN_SRC yaml :tangle ~/.xmonad/stack.yaml
      resolver:
        url: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/18/13.yaml

      # Git packages.
      packages:
        - xmonad-git
        - xmonad-contrib-git
    #+END_SRC

    Build file that's used when =xmonad --recompile= is called.

    #+BEGIN_SRC sh :tangle ~/.xmonad/build :tangle-mode (identity #o755)
      #!/bin/sh

      exec stack ghc --  \
          --make xmonad.hs \
          -i               \
          -ilib            \
          -fforce-recomp   \
          -main-is main    \
          -v0              \
          -o "$1"
    #+END_SRC

    Install xmonad. Installs to =~/.local/bin/=.

    #+BEGIN_SRC emacs-lisp :dir ~/.xmonad
      (async-shell-command "stack install" "*stack install [xmonad]*")
    #+END_SRC

    #+RESULTS:
    : #<window 11 on *stack install [xmonad]*>

    Window manager configuration.

    #+BEGIN_SRC haskell :tangle ~/.xmonad/xmonad.hs :noweb yes
      import qualified Data.List as List
      import qualified Data.Map as Map
      import qualified Data.Map.Strict as StrictMap
      import Graphics.X11.ExtraTypes.XF86
      import System.Exit
        ( ExitCode (ExitSuccess),
          exitWith,
        )
      import XMonad
      import XMonad.Actions.PhysicalScreens
        ( sendToScreen,
          viewScreen,
        )
      import qualified XMonad.Hooks.DynamicLog as D
      import XMonad.Hooks.EwmhDesktops
        ( ewmh,
          fullscreenEventHook,
        )
      import XMonad.Hooks.ManageDocks
        ( ToggleStruts (..),
          avoidStruts,
          docks,
        )
      import XMonad.Hooks.ManageHelpers
        ( Side (..),
          doCenterFloat,
          doSideFloat,
          isDialog,
        )
      import XMonad.Hooks.UrgencyHook
        ( NoUrgencyHook (..),
          withUrgencyHook,
        )
      import XMonad.Layout (Full (..), Tall (..))
      import XMonad.Layout.NoBorders
        ( Ambiguity (..),
          lessBorders,
        )
      import XMonad.Layout.Spacing
        ( Border (..),
          spacingRaw,
        )
      import XMonad.Prompt
      import XMonad.Prompt.Shell
      import qualified XMonad.StackSet as W
      import XMonad.Util.Run
        ( hPutStrLn,
          runProcessWithInput,
          spawnPipe,
        )
      import XMonad.Util.WorkspaceCompare (getSortByIndex)

      promptConf =
        def
          { position = Bottom,
            font = "<<xft-ui-font()>>",
            height = 44,
            bgColor = dark,
            fgColor = foreground,
            bgHLight = dark,
            fgHLight = highlight,
            promptBorderWidth = myPromptBorderWidth,
            borderColor = myPromptBorderColor,
            maxComplRows = Just 1,
            showCompletionOnTab = False
          }

      -- | Float and resize window to the center of the screen.
      centerWindow :: Window -> X ()
      centerWindow win = do
        (_, W.RationalRect x y w h) <- floatLocation win
        let newH = 11 / 12
        let newW = 3 / 5
        windows $
          W.float win (W.RationalRect ((1 - newW) / 2) ((1 - newH) / 2) newW newH)
        return ()

      myWorkspaceKeys conf@(XConfig {XMonad.modMask = modMask}) =
        Map.fromList $
          [ ((modMask, xK_Return), spawn myTerminal),
            ((modMask, xK_p), shellPrompt promptConf),
            ((modMask, xK_b), spawn myBrowser),
            ((modMask, xK_v), spawn myEditor),
            ((modMask, xK_n), spawn "dunstctl history-pop"),
            ((modMask .|. shiftMask, xK_n), spawn "dunstctl close"),
            ((modMask, xK_q), spawn "lock"),
            ((modMask .|. shiftMask, xK_q), spawn "lock suspend"),
            ((modMask, xK_x), spawn "if type xmonad; then xmonad --restart; fi"),
            ((modMask .|. shiftMask, xK_x), io (exitWith ExitSuccess)),
            ((modMask .|. shiftMask, xK_c), kill),
            -- Layouts
            ((modMask, xK_space), sendMessage NextLayout),
            ((modMask .|. shiftMask, xK_space), setLayout $ XMonad.layoutHook conf),
            -- Move window focus
            ((modMask, xK_j), windows W.focusDown),
            ((modMask, xK_k), windows W.focusUp),
            ((modMask, xK_m), windows W.focusMaster),
            -- Modify the window order
            ((modMask .|. shiftMask, xK_j), windows W.swapDown),
            ((modMask .|. shiftMask, xK_k), windows W.swapUp),
            -- Resize windows
            ((modMask, xK_h), sendMessage Shrink),
            ((modMask, xK_l), sendMessage Expand),
            -- Floating layer
            ((modMask, xK_t), withFocused $ windows . W.sink),
            ((modMask, xK_f), withFocused $ centerWindow),
            -- Increase/decrease windos in master area
            ((modMask, xK_comma), sendMessage (IncMasterN 1)),
            ((modMask, xK_period), sendMessage (IncMasterN (-1)))
          ]
            ++
            -- Switch screens based on physical position (xrandr).
            [ ((m .|. modMask, key), f sc)
              | (key, sc) <- zip [xK_w, xK_e] [0 ..],
                (f, m) <- [(viewScreen def, 0), (sendToScreen def, shiftMask)]
            ]
            ++
            -- Switch workspaces.
            [ ((m .|. modMask, k), windows $ f i)
              | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9],
                (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]
            ]
            ++
            -- Various function keys.
            [ ((0, xF86XK_MonBrightnessUp), spawn "bri laptop up"),
              ((0, xF86XK_MonBrightnessDown), spawn "bri laptop down"),
              ((0, xF86XK_AudioRaiseVolume), spawn "vol up"),
              ((0, xF86XK_AudioLowerVolume), spawn "vol down"),
              ((0, xF86XK_AudioMute), spawn "vol mute")
            ]

      stringifyLayout :: String -> String
      stringifyLayout l
        | t "Tall" l = fmt "tall"
        | t "Full" l = fmt "full"
        | otherwise = fmt l
        where
          t = List.isInfixOf
          fmt s = "[" ++ s ++ "]"

      myLogHook h = do
        let fmt fg bg = D.pad . D.xmobarColor fg bg
        D.dynamicLogWithPP
          D.xmobarPP
            { D.ppCurrent = fmt primary "",
              D.ppHidden = fmt muted "",
              D.ppVisible = fmt foreground "",
              D.ppUrgent = fmt urgent "",
              D.ppLayout = fmt muted "" . stringifyLayout,
              D.ppTitle = const "",
              D.ppSep = " ",
              D.ppSort = getSortByIndex,
              D.ppOutput = hPutStrLn h
            }

      myLayoutHook =
        uniformSpacing $
          lessBorders (OnlyScreenFloat) (tall ||| Full)
        where
          tall = Tall 1 (5 / 100) (1 / 2)
          gs = 5
          uniformSpacing = spacingRaw False (border) True (border) True
          border = Border gs gs gs gs

      myManageHook = composeAll [ isDialog =? True --> doCenterFloat
                                , className =? "Xmessage" --> doCenterFloat
                                , className =? "Pavucontrol" --> doCenterFloat
                                , fmap (List.isPrefixOf "zoom") className --> doCenterFloat ]

      myConfig pipe =
        withUrgencyHook NoUrgencyHook $
          ewmh $
            docks
              def
                { logHook = myLogHook pipe,
                  manageHook = myManageHook,
                  layoutHook = avoidStruts $ myLayoutHook,
                  handleEventHook = fullscreenEventHook,
                  focusFollowsMouse = False,
                  workspaces = myWorkspaces,
                  terminal = myTerminal,
                  modMask = myModMask,
                  keys = myWorkspaceKeys,
                  borderWidth = myBorderWidth,
                  normalBorderColor = myUnfocusedBorderColor,
                  focusedBorderColor = myFocusedBorderColor
                }

      main = xmonad . myConfig =<< spawnPipe "xmobar"

      -- programs
      myEditor = "editor -c"

      myTerminal = "terminal"

      myBrowser = "firefox"

      -- colors
      dark = "<<ui-dark-color()>>"

      highlight = "<<ui-fg-highlight-color()>>"

      muted = "<<ui-fg-muted-color()>>"

      foreground = "<<ui-fg-color()>>"

      primary = "#e8e8e8"

      urgent = "#fa7610"

      myFocusedBorderColor = "<<ui-dark-color()>>"

      myUnfocusedBorderColor = "<<ui-fg-color()>>"

      myPromptBorderColor = "<<ui-border-color()>>"

      -- config vars
      myBorderWidth = 2

      myPromptBorderWidth = 1

      myModMask = mod4Mask

      myWorkspaces = ["def", "web", "dev", "misc"]
    #+END_SRC

    Recompile and reload xmonad.

    #+BEGIN_SRC bash :results value
      xmonad --recompile && xmonad --restart
    #+END_SRC

    #+RESULTS:
    : 0

*** Xmobar

    #+BEGIN_SRC haskell :tangle ~/.xmobarrc :noweb yes
      Config {
          font = "<<xft-ui-font()>>",
          bgColor = "<<ui-dark-color()>>",
          fgColor = "<<ui-fg-color()>>",
          border = FullB,
          borderColor = "<<ui-border-color()>>",
          borderWidth = 1,
          position = Top,
          allDesktops = False,
          lowerOnStart = True,
          hideOnStart = False,
          persistent = True,

          commands = [
              Run Date "%a, %b %d %I:%M%P" "date" 10,

              Run CommandReader "STATUS_SECTION_COLOR=<<ui-fg-muted-color()>> ~/.status/status.scm" "status",

              Run StdinReader
          ],
          sepChar = "%",
          alignSep = "}{",
          template = " %StdinReader% }  %date%  { %status% "
      }
    #+END_SRC

*** Status bar
    :PROPERTIES:
    :header-args+: :tangle ~/.status/status.scm
    :header-args+: :tangle-mode (identity #o755)
    :header-args:scheme: :session * status * :scheme guile
    :END:

    Auto-invoke guile.

    #+BEGIN_SRC text
      #!/usr/bin/guile \
      -e main -s
      !#
    #+END_SRC

    The actual scheme source for status. =geiser= can be used by evaling the below
    code block.

    #+BEGIN_SRC scheme
      (use-modules (ice-9 textual-ports))
      (use-modules (ice-9 popen))

      (define (file->string f)
        (call-with-input-file f
          (lambda (p)
            (get-string-all p))))

      (define (file->number f)
        (let ((s (file->string f)))
          (string->number (string-trim-both s))))

      (define (command->string command)
        (let* ((p (open-input-pipe command))
               (s (get-string-all p)))
          (close-pipe p)
          (string-trim-both s)))

      (define charge-full-f "/sys/class/power_supply/BAT0/charge_full")
      (define charge-now-f "/sys/class/power_supply/BAT0/charge_now")
      (define charge-status-f "/sys/class/power_supply/BAT0/status")

      (define (battery?)
        (file-exists? charge-full-f))

      (define (battery-status)
        (let ((s (string-trim-both (file->string charge-status-f))))
          (cond ((string= "Full" s) 'full)
                ((string= "Discharging" s) 'discharging)
                ((string= "Charging" s) 'charging)
                (else '()))))

      (define (battery-percent)
        (let ((full (file->number charge-full-f))
              (curr (file->number charge-now-f)))
          (floor (/ (* curr 100) full))))

      (define (volume-percent)
        (command->string "vol get"))

      (define (mute?)
        (let ((s (command->string "pamixer --get-mute")))
          (string=? s "true")))

      (define (essid)
        (command->string "essid"))

      (define (get-section-color)
        "Get the color that the section description should be formatted with."
        (or (getenv "STATUS_SECTION_COLOR") "#ffffff"))

      (define (format-section section value)
        (let ((color (get-section-color)))
          (format #f "<fc=~A> ~A:</fc> ~A" color section value)))

      (define (format-battery)
        (if (battery?)
            (let* ((status (battery-status))
                   (icon (cond ((eq? status 'discharging) " -")
                               ((eq? status 'charging) " +")
                               (else "")))
                   (s (format #f "~A%~A" (battery-percent) icon)))
              (format-section "bat" s))
            ""))

      (define (format-volume)
        (let* ((mute-str (if (mute?) " (mute)" ""))
               (s (format #f "~A%~A" (volume-percent) mute-str)))
          (format-section "vol" s)))

      (define (format-wifi)
        (format-section "wifi" (essid)))

      (define (format-status)
        (string-append
         (string-trim-both
          (string-join
           (list
            (format-wifi)
            (format-volume)
            (format-battery))
           "  "))
         " "))

      (define loop-wait 5)

      (define (print-loop)
        (while #t
          (display (format-status))
          (newline)
          (sleep loop-wait)))

      (define (main args)
        (setvbuf (current-output-port) 'none)
        (print-loop))
    #+END_SRC

    #+RESULTS:
    : #<unspecified>

* GTK Settings

** GTK2

   #+BEGIN_SRC conf :tangle ~/.gtkrc-2.0 :noweb yes
     gtk-icon-theme-name = "Adwaita"
     gtk-theme-name = "Arc"
     gtk-font-name = "<<font-sans-serif()>> 11"
   #+END_SRC

** GTK3

   #+BEGIN_SRC conf :tangle ~/.config/gtk-3.0/settings.ini :noweb yes
     [Settings]
     gtk-icon-theme-name = Adwaita
     gtk-theme-name = Arc
     gtk-font-name = <<font-sans-serif()>> 11
   #+END_SRC

* Applications
** Nyxt

   I don't use nyxt as my primary browser, but it's fun to mess around with
   occasionally.

   Start the slynk server by running =start-slynk= in nyxt. This uses the
   default swank port of 4006. Connect to the slynk server by running
   =sly-connect= in Emacs.

   #+BEGIN_SRC lisp :tangle ~/.config/nyxt/init.lisp
     (defvar *custom-keymap* (make-keymap "custom-keymap")
       "Keymap containing all my custom keybinds.")

     (define-key *custom-keymap*
       "C-d" 'nyxt/web-mode:scroll-page-down
       "C-u" 'nyxt/web-mode:scroll-page-up)

     (define-mode custom-keymap-mode ()
       "Mode for using my custom keybinds."
       ((keymap-scheme (keymap:make-scheme
                        scheme:vi-normal *custom-keymap*))))

     (defvar *search-engines*
       (list '("google" "https://www.google.com/search?q=~a"))
       "List of search engines.")

     (define-configuration buffer
       ((default-modes (append '(nyxt::vi-normal-mode custom-keymap-mode blocker-mode) %slot-default%))
        (search-engines (append %slot-default%
                                (mapcar (lambda (engine) (apply 'make-search-engine engine))
                                        ,*search-engines*)))))

     (define-configuration prompt-buffer
       ((default-modes (append '(nyxt::vi-insert-mode) %slot-default%))))

     ;; Load up slynk.
     (push #p"~/.emacs.d/straight/build/sly/contrib/" asdf:*central-registry*)
     (push #p"~/.emacs.d/straight/build/sly/slynk/" asdf:*central-registry*)
     (asdf:load-system :slynk)

     (define-command-global start-slynk (&optional (slynk-port *swank-port*))
       "Start s Slynk server that can be connected to from Emacs via Sly."
       (slynk:create-server :port slynk-port :dont-close t))
   #+END_SRC

   #+RESULTS:
   : #<COMMAND START-SLYNK {1007CFE8CB}>
